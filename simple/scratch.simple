(load-file "simple/core.simple")
(load-file "simple/test.simple")
(load-file "simple/expander.simple")
(load-file "simple/compiler.simple")

(assert (== 4 (+ 2 2)))
(assert (== 5 (+ 2 2)))
(assert (== '() '()))
(assert (= '() '()))
(assert (= [] []))
(assert (= (list 1 2 3) (list 1 2 3)))
(assert (= [1 2 3] [1 2 3]))
(assert (== [1 2 3] [1 2 3]))
(assert (= :foo :foo))

;; @(debug)
;; (flatten-body '((do (do a b c) e f g (do x y (do z)))) env)

;; @(debug)
;; (collect-defines '((define* foo 42) 
;;                    (define* bar 32) 
;;                    (define* wham (* x x)) 
;;                    (prn foo bar wham))
;;                   '())

;; @(debug)
;; (bind env 'foo)

;; @(debug)
;; (resolve env 'foo)

;; @(debug)
;; (expand-let* '(x 42 y 23) '([x y]) env)

;; @(debug)
;; (expand-fn* '() #nil '(
;;   (define* x 42)
;;   (define* y 21)
;;   (* x y)) env)

;; (define (wtf expr)
;;   (warn expr)
;;   (define expanded (expand expr (dict)))
;;   (notify expanded)
;;   (define normalized (normalize-term expanded))
;;   (notify normalized)
;;   (define directified (directify normalized))
;;   (notify directified)
;;   (define jsified (emit-program directified))
;;   (println jsified)
;;   (detonate jsified))

;; (wtf '(let (x 42 y 21) (* x y)))

(compile-and-evaluate 
  '(let loop (acc 2 i 0)
    (println "woot!" acc i) 
    (if (< i 10) 
      (loop (+ acc acc) (inc i))
      (prn acc)))
  (dict))

;; (wtf '(define* foo 42))

;; (prn "yoooo")
;; (prn foo)
;; (prn (expander/macroexpand '(-> code (expand env) normalize-term directify emit-program detonate)))